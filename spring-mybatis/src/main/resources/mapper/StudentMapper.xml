<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="StudentMapper">
	<!--开启本mapper的namespace下的二级缓存-->
	<!--
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，
                移除最长时间不用的对形象
        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果你不配置它，那么当
        SQL被执行的时候才会去刷新缓存。
        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
        这里配置的是1024个对象
        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
        办法修改缓存，他的默认值是false，不允许我们修改

        <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />
    -->
	<cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>

	<resultMap id="BaseResultMap" type="Student">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="age" property="age" jdbcType="INTEGER" />
		<result column="address" property="address" jdbcType="VARCHAR" />
		<result column="gender" property="gender" jdbcType="INTEGER" />
	</resultMap>
	<resultMap id="studentMap" type="Student">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR"  />
		<result column="age" property="age" jdbcType="INTEGER" />
		<result column="address" property="address" jdbcType="VARCHAR" />
		<result column="gender" property="gender" jdbcType="INTEGER" />

		<association property="studentIdcard" javaType="com.summer.tech.mybatis.entity.StudentIdcard">
			<id property="id" column="id"></id>
			<result property="studentId" column="student_id" />
			<result column="idcard" property="idcard" />
			<result column="create_time" property="createTime" />
		</association>

		<collection property="bankCards" ofType="com.summer.tech.mybatis.entity.BankCard" >
			<id property="id" column="card_id" />
			<result column="student_id" property="studentId" />
			<result column="bank" property="bank" />
			<result column="bank_card" property="bankCard" />
		</collection>

		<discriminator javaType="int" column="gender">
			<case value="1" resultMap="maleStudentMap"/>
			<case value="2" resultMap="femaleStudentMap"/>
		</discriminator>
	</resultMap>

	<resultMap id="maleStudentMap" type="com.summer.tech.mybatis.entity.MaleStudent" extends="studentMap">
		<collection property="maleHealthForms" select="com.summer.tech.mybatis.mapper.MaleHealthFormMapper.findMaleHealthByStudentId" column="id" />
	</resultMap>

	<resultMap id="femaleStudentMap" type="com.summer.tech.mybatis.entity.FemaleStudent" extends="studentMap">
		<collection property="femaleHealthForms" select="com.summer.tech.spring.mybatis.mapper.FealeHealthFormMapper.findFemaleHealthByStudentId" column="id" />
	</resultMap>

	<sql id="Base_Column_List">
		id, name, age, address, gender
	</sql>

	<select id="selectAllStudent" resultMap="BaseResultMap" >
		select * from student
	</select>

	<select id="selectStudentAndIdcard" resultMap="studentMap" >
		select a.*,b.*,c.id as cardId,c.bank,c.bank_card from student a LEFT JOIN student_idcard b ON a.id=b.student_id
		LEFT JOIN bank_card c ON  c.student_id=a.id
	</select>

	<select id="selectByPrimaryKey" resultMap="studentMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from student
		where id = #{id,jdbcType=INTEGER}
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		student
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<insert id="insert" parameterType="Student">
		insert into student (id, name,
		age,
		address,
		gender)
		values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
		#{age,jdbcType=INTEGER},
		#{address,jdbcType=VARCHAR},
		#{gender,jdbcType=INTEGER})
	</insert>

	<insert id="insertSelective" parameterType="Student">
		insert into student
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="age != null">
				age,
			</if>
			<if test="address != null">
				address,
			</if>
			<if test="gender != null">
				gender,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				#{age,jdbcType=INTEGER},
			</if>
			<if test="address != null">
				#{address,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				#{gender,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>

	<update id="updateByPrimaryKeySelective" parameterType="Student">
		update student
		<set>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				age = #{age,jdbcType=INTEGER},
			</if>
			<if test="address != null">
				address = #{address,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				gender = #{gender,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

	<update id="updateByPrimaryKey" parameterType="Student">
		update student
		set
		name = #{name,jdbcType=VARCHAR},
		age = #{age,jdbcType=INTEGER},
		address= #{address,jdbcType=VARCHAR},
		gender= #{gender,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
</mapper>